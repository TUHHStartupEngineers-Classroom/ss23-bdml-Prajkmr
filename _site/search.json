[
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/04 Automated Machine Learning with H20-2.html",
    "href": "content/01_journal/04 Automated Machine Learning with H20-2.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/03 Automated Machine Learning with H20-1.html",
    "href": "content/01_journal/03 Automated Machine Learning with H20-1.html",
    "title": "03 Automated Machine Learning with H20-1",
    "section": "",
    "text": "Use your learning from descriptive features and plot_ggpairs() to further investigate the features. Run the functions above according to the features needed. Answer the following questions. Most of the time, you will only need the images from diagonal."
  },
  {
    "objectID": "content/01_journal/03 Automated Machine Learning with H20-1.html#attrition-by-department",
    "href": "content/01_journal/03 Automated Machine Learning with H20-1.html#attrition-by-department",
    "title": "03 Automated Machine Learning with H20-1",
    "section": "\n2.1 Attrition by department",
    "text": "2.1 Attrition by department\n\ndept_job_role_tbl %>%\n  \n  # Block 1\n  group_by(Department, Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n  \n  # Block 2: Caution: It's easy to inadvertently miss grouping when creating counts & percents within groups\n  group_by(Department) %>%\n  mutate(pct = n / sum(n))\n\n#> `summarise()` has grouped output by 'Department'. You can override using the\n#> `.groups` argument."
  },
  {
    "objectID": "content/01_journal/03 Automated Machine Learning with H20-1.html#attrition-by-job-role",
    "href": "content/01_journal/03 Automated Machine Learning with H20-1.html#attrition-by-job-role",
    "title": "03 Automated Machine Learning with H20-1",
    "section": "\n2.2 Attrition by job role",
    "text": "2.2 Attrition by job role\n\ndept_job_role_tbl %>%\n  \n  # Block 1\n  group_by(Department, JobRole, Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n  \n  # Block 2\n  group_by(Department, JobRole) %>%\n  mutate(pct = n / sum(n)) %>%\n  ungroup() %>%\n  \n  # Block 3\n  filter(Attrition %in% \"Yes\")\n\n#> `summarise()` has grouped output by 'Department', 'JobRole'. You can override\n#> using the `.groups` argument."
  },
  {
    "objectID": "content/01_journal/03 Automated Machine Learning with H20-1.html#develop-kpi",
    "href": "content/01_journal/03 Automated Machine Learning with H20-1.html#develop-kpi",
    "title": "03 Automated Machine Learning with H20-1",
    "section": "\n2.3 Develop KPI",
    "text": "2.3 Develop KPI\n\ndept_job_role_tbl %>%\n  \n  # Block 1\n  group_by(Department, JobRole, Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n  \n  # Block 2\n  group_by(Department, JobRole) %>%\n  mutate(pct = n / sum(n)) %>%\n  ungroup() %>%\n  \n  # Block 3\n  filter(Attrition %in% \"Yes\") %>%\n  arrange(desc(pct)) %>%\n  mutate(\n    above_industry_avg = case_when(\n      pct > 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  )\n\n#> `summarise()` has grouped output by 'Department', 'JobRole'. You can override\n#> using the `.groups` argument."
  },
  {
    "objectID": "content/01_journal/03 Automated Machine Learning with H20-1.html#function-to-calculate-attrition-cost",
    "href": "content/01_journal/03 Automated Machine Learning with H20-1.html#function-to-calculate-attrition-cost",
    "title": "03 Automated Machine Learning with H20-1",
    "section": "\n2.4 Function to calculate attrition cost",
    "text": "2.4 Function to calculate attrition cost\n\ncalculate_attrition_cost <- function(\n  \n  # Employee\n  n                    = 1,\n  salary               = 80000,\n  \n  # Direct Costs\n  separation_cost      = 500,\n  vacancy_cost         = 10000,\n  acquisition_cost     = 4900,\n  placement_cost       = 3500,\n  \n  # Productivity Costs\n  net_revenue_per_employee = 250000,\n  workdays_per_year        = 240,\n  workdays_position_open   = 40,\n  workdays_onboarding      = 60,\n  onboarding_efficiency    = 0.50\n  \n) {\n  \n  # Direct Costs\n  direct_cost <- sum(separation_cost, vacancy_cost, acquisition_cost, placement_cost)\n  \n  # Lost Productivity Costs\n  productivity_cost <- net_revenue_per_employee / workdays_per_year *\n    (workdays_position_open + workdays_onboarding * onboarding_efficiency)\n  \n  # Savings of Salary & Benefits (Cost Reduction)\n  salary_benefit_reduction <- salary / workdays_per_year * workdays_position_open\n  \n  # Estimated Turnover Per Employee\n  cost_per_employee <- direct_cost + productivity_cost - salary_benefit_reduction\n  \n  # Total Cost of Employee Turnover\n  total_cost <- n * cost_per_employee\n  \n  return(total_cost)\n  \n}\ncalculate_attrition_cost()\n\n#> [1] 78483.33\n\ncalculate_attrition_cost(200)\n\n#> [1] 15696667"
  },
  {
    "objectID": "content/01_journal/03 Automated Machine Learning with H20-1.html#function-creation",
    "href": "content/01_journal/03 Automated Machine Learning with H20-1.html#function-creation",
    "title": "03 Automated Machine Learning with H20-1",
    "section": "\n2.5 Function creation",
    "text": "2.5 Function creation\n\ndept_job_role_tbl %>%\n  \n  # Block 1\n  group_by(Department, JobRole, Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n  \n  # Block 2\n  group_by(Department, JobRole) %>%\n  mutate(pct = n / sum(n)) %>%\n  ungroup() %>%\n  \n  # Block 3\n  filter(Attrition %in% \"Yes\") %>%\n  arrange(desc(pct)) %>%\n  mutate(\n    above_industry_avg = case_when(\n      pct > 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  ) %>%\n  \n  # Block 4. Set salaray to 80000 for now\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  )\n\n#> `summarise()` has grouped output by 'Department', 'JobRole'. You can override\n#> using the `.groups` argument."
  },
  {
    "objectID": "content/01_journal/03 Automated Machine Learning with H20-1.html#function-to-convert-counts-to-percentages.",
    "href": "content/01_journal/03 Automated Machine Learning with H20-1.html#function-to-convert-counts-to-percentages.",
    "title": "03 Automated Machine Learning with H20-1",
    "section": "\n2.6 Function to convert counts to percentages.",
    "text": "2.6 Function to convert counts to percentages.\n\ndept_job_role_tbl %>%\n  count(Department, JobRole, Attrition)\n\n\n\n  \n\n\ncount_to_pct <- function(data, ..., col = n) {\n  # capture the dots\n  grouping_vars_expr <- quos(...)\n  col_expr <- enquo(col)\n  ret <- data %>%\n    group_by(!!! grouping_vars_expr) %>%\n    mutate(pct = (!! col_expr) / sum(!! col_expr)) %>%\n    ungroup()\n  return(ret)\n}\ndept_job_role_tbl %>%\n  count(JobRole, Attrition) %>%\n  count_to_pct(JobRole)\n\n\n\n  \n\n\ndept_job_role_tbl %>%\n  count(Department, JobRole, Attrition) %>%\n  count_to_pct(Department, JobRole) \n\n\n\n  \n\n\n\n\ndept_job_role_tbl %>%\n  \n  group_by(Department, JobRole, Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n  \n  group_by(Department, JobRole) %>%\n  mutate(pct = n / sum(n)) %>%\n  ungroup() %>%\n  \n  filter(Attrition %in% \"Yes\") %>%\n  arrange(desc(pct)) %>%\n  mutate(\n    above_industry_avg = case_when(\n      pct > 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  ) %>%\n  \n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  )\n\n#> `summarise()` has grouped output by 'Department', 'JobRole'. You can override\n#> using the `.groups` argument.\n\n\n\n\n  \n\n\n\n\nassess_attrition <- function(data, attrition_col, attrition_value, baseline_pct) {\n  \n  attrition_col_expr <- enquo(attrition_col)\n  \n  data %>%\n    \n    # Use parenthesis () to give tidy eval evaluation priority\n    filter((!! attrition_col_expr) %in% attrition_value) %>%\n    arrange(desc(pct)) %>%\n    mutate(\n      # Function inputs in numeric format (e.g. baseline_pct = 0.088 don't require tidy eval)\n      above_industry_avg = case_when(\n        pct > baseline_pct ~ \"Yes\",\n        TRUE ~ \"No\"\n      )\n    )\n  \n}"
  },
  {
    "objectID": "content/01_journal/03 Automated Machine Learning with H20-1.html#visualization",
    "href": "content/01_journal/03 Automated Machine Learning with H20-1.html#visualization",
    "title": "03 Automated Machine Learning with H20-1",
    "section": "\n2.7 Visualization",
    "text": "2.7 Visualization\n\ndept_job_role_tbl %>%\n  \n  count(Department, JobRole, Attrition) %>%\n  count_to_pct(Department, JobRole) %>%\n  assess_attrition(Attrition, attrition_value = \"Yes\", baseline_pct = 0.088) %>%\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  ) %>%\n  \n  # Data Manipulation\n  mutate(name = str_c(Department, JobRole, sep = \": \") %>% as_factor()) %>%\n  \n  # Check levels\n  # pull(name) %>%\n  # levels()\n  \n  mutate(name      = fct_reorder(name, cost_of_attrition)) %>%\n  mutate(cost_text = str_c(\"$\", format(cost_of_attrition / 1e6, digits = 2),\n                           \"M\", sep = \"\")) %>%\n  \n  #Plotting\n  ggplot(aes(cost_of_attrition, y = name)) +\n  geom_segment(aes(xend = 0, yend = name),    color = \"#2dc6d6\") +\n  geom_point(  aes(size = cost_of_attrition), color = \"#2dc6d6\") +\n  scale_x_continuous(labels = scales::dollar) +\n  geom_label(aes(label = cost_text, size = cost_of_attrition),\n             hjust = \"inward\", color = \"#2dc6d6\") +\n  scale_size(range = c(3, 5)) +\n  labs(title = \"Estimated cost of Attrition: By Dept and Job Role\",\n       y = \"\",\n       x = \"Cost of attrition\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n# Descriptive Features\nemployee_attrition_tbl %>% select(Age, DistanceFromHome, Gender, MaritalStatus, NumCompaniesWorked, Over18)\n\n\n\n  \n\n\n\n\n# Employment Features\nemployee_attrition_tbl %>% select(Department, EmployeeCount, EmployeeNumber, JobInvolvement, JobLevel, JobRole, JobSatisfaction)\n\n\n\n  \n\n\n\n\n# Compensation Features\nemployee_attrition_tbl %>% select(DailyRate, HourlyRate, MonthlyIncome, MonthlyRate, PercentSalaryHike, StockOptionLevel)\n\n\n\n  \n\n\n\n\n# Survery Results\nemployee_attrition_tbl %>% select(EnvironmentSatisfaction, JobSatisfaction, RelationshipSatisfaction, WorkLifeBalance)\n\n\n\n  \n\n\n\n\n# Performance Data\nemployee_attrition_tbl %>% select(JobInvolvement, PerformanceRating)\n\n\n\n  \n\n\n\n\n# Work-Life Features\nemployee_attrition_tbl %>% select(BusinessTravel, OverTime)\n\n\n\n  \n\n\n\n\n# Training & Education\nemployee_attrition_tbl %>% select(Education, EducationField, TrainingTimesLastYear)\n\n\n\n  \n\n\n\n\n# Time-Based Features\nemployee_attrition_tbl %>% select(TotalWorkingYears, YearsAtCompany, YearsInCurrentRole, YearsSinceLastPromotion, YearsWithCurrManager)\n\n\n\n  \n\n\n\n\nlibrary(GGally)\n# Step 2: Data Visualization ----\nemployee_attrition_tbl %>%\n  select(Attrition,  Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %>%\n  ggpairs()\n\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n# Explore Features by Category\nplot_ggpairs <- function(data, color = NULL, density_alpha = 0.5) {\n  \n  color_expr <- enquo(color)\n  \n  if (rlang::quo_is_null(color_expr)) {\n    \n    g <- data %>%\n      ggpairs(lower = \"blank\") \n    \n  } else {\n    \n    color_name <- quo_name(color_expr)\n    \n    g <- data %>%\n      ggpairs(mapping = aes_string(color = color_name), \n              lower = \"blank\", legend = 1,\n              diag = list(continuous = wrap(\"densityDiag\", \n                                            alpha = density_alpha))) +\n      theme(legend.position = \"bottom\")\n  }\n  \n  return(g)\n  \n}"
  },
  {
    "objectID": "content/01_journal/03 Automated Machine Learning with H20-1.html#compensation-features-hourlyrate-monthlyincome-stockoptionlevel",
    "href": "content/01_journal/03 Automated Machine Learning with H20-1.html#compensation-features-hourlyrate-monthlyincome-stockoptionlevel",
    "title": "03 Automated Machine Learning with H20-1",
    "section": "\n3.1 Compensation features: HourlyRate, MonthlyIncome, StockOptionLevel",
    "text": "3.1 Compensation features: HourlyRate, MonthlyIncome, StockOptionLevel\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"income\"), contains(\"rate\"), contains(\"salary\"), contains(\"stock\")) %>%\n  plot_ggpairs(Attrition)\n\n#> Warning: `aes_string()` was deprecated in ggplot2 3.0.0.\n#> ℹ Please use tidy evaluation idioms with `aes()`.\n#> ℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n\n\n\n\n\n\n\nQ1.What can you deduce about the interaction between Monthly Income and Attrition?\n(a)Those that are leaving the company have a higher Monthly Income (b)That those are staying have a lower Monthly Income (c)Those that are leaving have a lower Monthly Income (d)It’s difficult to deduce anything based on the visualization\nQ2.What can you deduce about the interaction between Percent Salary Hike and Attrition?\n(a)Those that are leaving the company have a higher Percent Salary Hike (b)Those that are staying have a lower Percent Salary Hike (c)Those that are leaving have lower Percent Salary Hike (d)It’s difficult to deduce anything based on the visualization\nQ3.What can you deduce about the interaction between Stock Option Level and Attrition?\n(a)Those that are leaving the company have a higher stock option level (b)Those that are staying have a higher stock option level (c)It’s difficult to deduce anything based on the visualization"
  },
  {
    "objectID": "content/01_journal/03 Automated Machine Learning with H20-1.html#survey-results-satisfaction-level-work-life-balance",
    "href": "content/01_journal/03 Automated Machine Learning with H20-1.html#survey-results-satisfaction-level-work-life-balance",
    "title": "03 Automated Machine Learning with H20-1",
    "section": "\n3.2 Survey Results: Satisfaction level, Work Life Balance",
    "text": "3.2 Survey Results: Satisfaction level, Work Life Balance\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"satisfaction\"), contains(\"life\")) %>%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nQ4.What can you deduce about the interaction between Environment Satisfaction and Attrition?\n(a)A higher proportion of those leaving have a low environment satisfaction level (b)A higher proportion of those leaving have a high environment satisfaction level (c)It’s difficult to deduce anything based on the visualization\nQ5.What can you deduce about the interaction between Work Life Balance and Attrition\n(a)Those that are leaving have higher density of 2’s and 3’s (b)Those that are staying have a higher density of 2’s and 3’s (c)Those that are staying have a lower density of 2’s and 3’s (d)It’s difficult to deduce anything based on the visualization"
  },
  {
    "objectID": "content/01_journal/03 Automated Machine Learning with H20-1.html#performance-data-job-involvement-performance-rating",
    "href": "content/01_journal/03 Automated Machine Learning with H20-1.html#performance-data-job-involvement-performance-rating",
    "title": "03 Automated Machine Learning with H20-1",
    "section": "\n3.3 Performance Data: Job Involvement, Performance Rating",
    "text": "3.3 Performance Data: Job Involvement, Performance Rating\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"performance\"), contains(\"involvement\")) %>%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nQ6.What Can you deduce about the interaction between Job Involvement and Attrition?\n(a)Those that are leaving have a lower density of 3’s and 4’s (b)Those that are leaving have a lower density of 1’s and 2’s (c)Those that are staying have a lower density of 2’s and 3’s (d)It’s difficult to deduce anything based on the visualization"
  },
  {
    "objectID": "content/01_journal/03 Automated Machine Learning with H20-1.html#work-life-features",
    "href": "content/01_journal/03 Automated Machine Learning with H20-1.html#work-life-features",
    "title": "03 Automated Machine Learning with H20-1",
    "section": "\n3.4 Work-Life Features",
    "text": "3.4 Work-Life Features\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"overtime\"), contains(\"travel\")) %>%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nQ7.What can you deduce about the interaction between Over Time and Attrition?\n(a)The proportion of those leaving that are working Over Time are high compared to those that are not leaving (b)The proportion of those staying that are working Over Time are high compared to those that are not staying"
  },
  {
    "objectID": "content/01_journal/03 Automated Machine Learning with H20-1.html#training-and-education",
    "href": "content/01_journal/03 Automated Machine Learning with H20-1.html#training-and-education",
    "title": "03 Automated Machine Learning with H20-1",
    "section": "\n3.5 Training and Education",
    "text": "3.5 Training and Education\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"training\"), contains(\"education\")) %>%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nQ8.What can you deduce about the interaction between Training Times Last Year and Attrition\n(a)People that leave tend to have more annual trainings (b)People that leave tend to have less annual trainings (c)It’s difficult to deduce anything based on the visualization"
  },
  {
    "objectID": "content/01_journal/03 Automated Machine Learning with H20-1.html#time-based-features-years-at-company-years-in-current-role",
    "href": "content/01_journal/03 Automated Machine Learning with H20-1.html#time-based-features-years-at-company-years-in-current-role",
    "title": "03 Automated Machine Learning with H20-1",
    "section": "\n3.6 Time-Based Features: Years at company, years in current role",
    "text": "3.6 Time-Based Features: Years at company, years in current role\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"years\")) %>%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nQ9.What can you deduce about the interaction between Years At Company and Attrition\n(a)People that leave tend to have more working years at the company (b)People that leave tend to have less working years at the company (c)It’s difficult to deduce anything based on the visualization\nQ10.What can you deduce about the interaction between Years Since Last Promotion and Attrition?\n(a)Those that are leaving have more years since last promotion than those that are staying (b)Those that are leaving have fewer years since last promotion than those that are staying (c)It’s difficult to deduce anything based on the visualization"
  },
  {
    "objectID": "content/01_journal/02 Supervised ML.html",
    "href": "content/01_journal/02 Supervised ML.html",
    "title": "02 Supervised ML",
    "section": "",
    "text": "1 Challenge Summary\nIn this session we did not use the recipes packages to prepare our data. This is going to be your challenge. For further information take a look at the last session or just use google. Prepare the data for the models with the steps provided below. Remember, you don’t need to set the flags by yourself (see all_nominal()). # Libraries\n\n# install packages\n# Standard\nlibrary(tidyverse)\n\n# Modeling\nlibrary(parsnip)\nlibrary(tidymodels)\nlibrary(rstanarm)\nlibrary(broom.mixed)\n\n\n# Preprocessing & Sampling\nlibrary(recipes)\nlibrary(rsample)\n\n# Modeling Error Metrics\nlibrary(yardstick)\n\n# Plotting Decision Trees\nlibrary(rpart.plot)\n\n\n2 Modeling\n\nbike_data_tbl <- readRDS(\"../../bike_orderlines.rds\")\nbike_data_tbl\n\n\n\n  \n\n\nmodel_sales_tbl <- bike_data_tbl %>%\n  select(total_price, model, category_2, frame_material) %>%\n  \n  group_by(model, category_2, frame_material) %>%\n  summarise(total_sales = sum(total_price)) %>%\n  ungroup() %>%\n  \n  arrange(desc(total_sales))\n\n#> `summarise()` has grouped output by 'model', 'category_2'. You can override\n#> using the `.groups` argument.\n\nmodel_sales_tbl %>%\n  mutate(category_2 = as_factor(category_2) %>% \n           fct_reorder(total_sales, .fun = max) %>% \n           fct_rev()) %>%\n  \n  ggplot(aes(frame_material, total_sales)) +\n  geom_violin() +\n  geom_jitter(width = 0.1, alpha = 0.5, color = \"#2c3e50\") +\n  facet_wrap(~ category_2) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1e-6, suffix = \"M\", accuracy = 0.1)) +\n  tidyquant::theme_tq() +\n  labs(title = \"Total Sales for Each Model\",x = \"Frame Material\", y = \"Revenue\")\n\n#> Registered S3 method overwritten by 'quantmod':\n#>   method            from\n#>   as.zoo.data.frame zoo\n\n\n#> Warning: Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n\n\n#> Warning in max(data$density): no non-missing arguments to max; returning -Inf\n\n\n#> Warning: Computation failed in `stat_ydensity()`\n#> Caused by error in `$<-.data.frame`:\n#> ! replacement has 1 row, data has 0\n\n\n\n\n\n\n\nbike_features_tbl <- readRDS(\"../../bike_features_tbl.rds\")\nbike_features_tbl <- bike_features_tbl %>% \n  select(frame_material:gender, `Rear Derailleur`, `Shift Lever`) %>% \n  mutate(`shimano dura-ace`        = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano dura-ace \") %>% as.numeric(),\n    `shimano ultegra`         = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano ultegra \") %>% as.numeric(),\n    `shimano 105`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano 105 \") %>% as.numeric(),\n    `shimano tiagra`          = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano tiagra \") %>% as.numeric(),\n    `Shimano sora`            = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano sora\") %>% as.numeric(),\n    `shimano deore`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano deore(?! xt)\") %>% as.numeric(),\n    `shimano slx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano slx\") %>% as.numeric(),\n    `shimano grx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano grx\") %>% as.numeric(),\n    `Shimano xt`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano deore xt |shimano xt \") %>% as.numeric(),\n    `Shimano xtr`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano xtr\") %>% as.numeric(),\n    `Shimano saint`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano saint\") %>% as.numeric(),\n    `SRAM red`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram red\") %>% as.numeric(),\n    `SRAM force`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram force\") %>% as.numeric(),\n    `SRAM rival`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram rival\") %>% as.numeric(),\n    `SRAM apex`               = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram apex\") %>% as.numeric(),\n    `SRAM xx1`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram xx1\") %>% as.numeric(),\n    `SRAM x01`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram x01|sram xo1\") %>% as.numeric(),\n    `SRAM gx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram gx\") %>% as.numeric(),\n    `SRAM nx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram nx\") %>% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram sx\") %>% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram sx\") %>% as.numeric(),\n    `Campagnolo potenza`      = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"campagnolo potenza\") %>% as.numeric(),\n    `Campagnolo super record` = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"campagnolo super record\") %>% as.numeric(),\n    `shimano nexus`           = `Shift Lever`     %>% str_to_lower() %>% str_detect(\"shimano nexus\") %>% as.numeric(),\n    `shimano alfine`          = `Shift Lever`     %>% str_to_lower() %>% str_detect(\"shimano alfine\") %>% as.numeric()\n  ) %>%  \n  select(-c(`Rear Derailleur`, `Shift Lever`)) %>% \n  mutate_if(is.numeric, ~replace(., is.na(.), 0)) \n\n\nbike_features_tbl <- bike_features_tbl %>% \n  mutate(id = row_number()) %>% \n  mutate(frame_material = factor(frame_material)) %>%\n  select(id, everything()) \n\n\nbike_features_tbl %>% distinct(category_2)\n\n\n\n  \n\n\nsplit_obj <- rsample::initial_split(bike_features_tbl, prop   = 0.80, \n                                    strata = \"category_2\")\nsplit_obj %>% training() %>% distinct(category_2)\n\n\n\n  \n\n\nsplit_obj %>% testing() %>% distinct(category_2)\n\n\n\n  \n\n\ntrain_tbl <- training(split_obj)\ntest_tbl  <- testing(split_obj)\n\n\ntrain_data <- train_tbl %>% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_data  <- test_tbl  %>% set_names(str_replace_all(names(test_tbl), \" |-\", \"_\"))\n\n\n3 Recipe\n\nbike_recipe <- recipe(frame_material ~ ., data = train_data) %>% \n  step_dummy(all_nominal(), -all_outcomes()) %>% \n  step_zv(all_predictors()) \nd <- summary(bike_recipe)\nlr_mod <- logistic_reg() %>% \n  set_engine(\"glm\")\nlr_mod\n\n#> Logistic Regression Model Specification (classification)\n#> \n#> Computational engine: glm\n\nbike_workflow <- workflow() %>% \n  add_model(lr_mod) %>% \n  add_recipe(bike_recipe)\nbike_workflow\n\n#> ══ Workflow ════════════════════════════════════════════════════════════════════\n#> Preprocessor: Recipe\n#> Model: logistic_reg()\n#> \n#> ── Preprocessor ────────────────────────────────────────────────────────────────\n#> 2 Recipe Steps\n#> \n#> • step_dummy()\n#> • step_zv()\n#> \n#> ── Model ───────────────────────────────────────────────────────────────────────\n#> Logistic Regression Model Specification (classification)\n#> \n#> Computational engine: glm\n\nbike_fit <- bike_workflow %>% \n  fit(data = train_data)\n\n#> Warning: glm.fit: algorithm did not converge\n\n\n#> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n\nbike_fit\n\n#> ══ Workflow [trained] ══════════════════════════════════════════════════════════\n#> Preprocessor: Recipe\n#> Model: logistic_reg()\n#> \n#> ── Preprocessor ────────────────────────────────────────────────────────────────\n#> 2 Recipe Steps\n#> \n#> • step_dummy()\n#> • step_zv()\n#> \n#> ── Model ───────────────────────────────────────────────────────────────────────\n#> \n#> Call:  stats::glm(formula = ..y ~ ., family = stats::binomial, data = data)\n#> \n#> Coefficients:\n#>                (Intercept)                          id  \n#>                  5.266e+21                   5.928e+13  \n#>                     weight                       price  \n#>                  2.291e+13                   3.815e+11  \n#>           shimano_dura_ace             shimano_ultegra  \n#>                  3.181e+15                   3.423e+15  \n#>                shimano_105              shimano_tiagra  \n#>                  2.674e+15                   1.076e+15  \n#>              shimano_deore                 shimano_slx  \n#>                  1.170e+15                  -4.800e+15  \n#>                shimano_grx                  Shimano_xt  \n#>                 -9.878e+14                  -4.988e+14  \n#>              Shimano_saint                    SRAM_red  \n#>                 -2.261e+15                   5.453e+14  \n#>                 SRAM_force                  SRAM_rival  \n#>                  2.809e+15                   4.778e+15  \n#>                  SRAM_apex                    SRAM_xx1  \n#>                 -6.429e+14                   1.481e+15  \n#>                   SRAM_x01                     SRAM_gx  \n#>                  2.644e+15                   7.723e+14  \n#>                    SRAM_nx                     SRAM_sx  \n#>                 -3.904e+13                  -1.788e+15  \n#>    Campagnolo_super_record               shimano_nexus  \n#>                 -2.026e+15                  -2.379e+15  \n#>             shimano_alfine           category_1_Gravel  \n#>                 -3.378e+14                  -5.266e+21  \n#>   category_1_Hybrid...City         category_1_Mountain  \n#>                 -5.266e+21                  -5.266e+21  \n#>            category_1_Road         category_2_All.Road  \n#>                  1.543e+22                  -1.373e+15  \n#>            category_2_City    category_2_Cross.Country  \n#>                  1.035e+15                   3.420e+15  \n#>      category_2_Cyclocross        category_2_Dirt.Jump  \n#>                 -2.070e+22                  -4.214e+15  \n#>        category_2_Downhill           category_2_E.City  \n#>                         NA                  -5.266e+21  \n#>       category_2_E.Fitness         category_2_E.Gravel  \n#>                 -5.266e+21                  -5.266e+21  \n#>      category_2_E.Mountain       category_2_E.Trekking  \n#>                 -5.266e+21                  -5.266e+21  \n#>       category_2_Endurance           category_2_Enduro  \n#>                 -2.070e+22                  -1.877e+15  \n#>       category_2_Fat.Bikes             category_2_Race  \n#>                  5.129e+15                  -2.070e+22  \n#>         category_2_Touring            category_2_Trail  \n#>                         NA                          NA  \n#> \n#> ...\n#> and 32 more lines.\n\nbike_fit %>% \n  pull_workflow_fit() %>% \n  tidy()\n\n#> Warning: `pull_workflow_fit()` was deprecated in workflows 0.2.3.\n#> ℹ Please use `extract_fit_parsnip()` instead.\n\n\n\n\n  \n\n\nbike_predict <- predict(bike_fit, test_data, type=\"prob\") %>% \n  bind_cols(test_data %>% select(frame_material, category_2)) \n\n#> Warning: There are new levels in a factor: E-Road\n\n\n#> Warning: There are new levels in a factor: Endurace:ON\n\n\n#> Warning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\n#> prediction from a rank-deficient fit may be misleading\n\nbike_predict %>% \n  roc_curve(truth = frame_material, .pred_aluminium) %>% \n  autoplot()\n\n\n\n\n\n\nbike_predict %>% \n  roc_curve(truth = frame_material, .pred_carbon) %>% \n  autoplot()\n\n\n\n\n\n\nbike_predict\n\n\n\n  \n\n\nroc_al <- bike_predict %>% \n  roc_auc(truth = frame_material, .pred_aluminium)\nroc_al\n\n\n\n  \n\n\nroc_car <- bike_predict %>% \n  roc_auc(truth = frame_material, .pred_carbon)\nroc_car\n\n\n\n  \n\n\n\n\n4 Evaluation\n\nmodel_01_linear_lm_simple <- linear_reg(mode = \"regression\") %>%\n  set_engine(\"lm\") %>%\n  fit(price ~ category_2 + frame_material, data = train_data)\nmodel_01_linear_lm_simple\n\n#> parsnip model object\n#> \n#> \n#> Call:\n#> stats::lm(formula = price ~ category_2 + frame_material, data = data)\n#> \n#> Coefficients:\n#>              (Intercept)        category_2All-Road            category_2City  \n#>                  1865.90                    -55.63                  -1040.35  \n#>  category_2Cross-Country      category_2Cyclocross       category_2Dirt Jump  \n#>                   127.06                   -271.38                   -576.90  \n#>       category_2Downhill          category_2E-City       category_2E-Fitness  \n#>                   980.00                   1167.24                   1176.43  \n#>       category_2E-Gravel      category_2E-Mountain      category_2E-Trekking  \n#>                  1590.00                   1634.63                   1541.43  \n#>      category_2Endurance          category_2Enduro       category_2Fat Bikes  \n#>                  -197.55                    820.39                  -1215.00  \n#>           category_2Race         category_2Touring           category_2Trail  \n#>                   606.54                   -694.40                   -113.35  \n#> category_2Triathlon Bike      frame_materialcarbon  \n#>                   680.00                   1733.10\n\ntest_data <- test_data %>% filter(category_2 != \"Fat Bikes\")%>% filter(category_2 != \"E-Road\")\nyards <- model_01_linear_lm_simple %>%\n  predict(new_data = test_data) %>%\n  bind_cols(test_data %>% select(price)) %>%\n  yardstick::metrics(truth = price, estimate = .pred)\nyards\n\n\n\n  \n\n\ng1 <- bike_features_tbl %>% \n  mutate(category_2 = as.factor(category_2) %>% \n           fct_reorder(price)) %>% \n  \n  ggplot(aes(category_2, price)) +\n  geom_violin() +\n  geom_jitter(width = 0.2, alpha = 0.5, color = \"#2dc6d6\") +\n  coord_flip() +\n  facet_wrap(~ frame_material) +\n  scale_y_continuous(labels = scales::dollar_format()) +\n  labs( title = \"Price for Each Model\", y = \"\", x = \"Category 2\")\ng1\n\n#> Warning: Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n\n\n\n\n\n\n\nnew_trail <- tibble(\n  model = \"Exceed AL SL new\",\n  category_2 = \"Trail\",\n  frame_material = \"aluminium\",\n  shimano_dura_ace = 0,\n  shimano_ultegra = 0,\n  shimano_105 = 0,\n  shimano_tiagra = 0,\n  Shimano_sora = 0,\n  shimano_deore = 0,\n  shimano_slx = 0,\n  shimano_grx = 0,\n  Shimano_xt = 1,\n  Shimano_xtr = 0,\n  Shimano_saint = 0,\n  SRAM_red = 0,\n  SRAM_force = 0,\n  SRAM_rival = 0,\n  SRAM_apex = 0,\n  SRAM_xx1 = 0,\n  SRAM_x01 = 0,\n  SRAM_gx = 0,\n  SRAM_nx = 0,\n  SRAM_sx = 0,\n  Campagnolo_potenza = 0,\n  Campagnolo_super_record = 0,\n  shimano_nexus = 0,\n  shimano_alfine = 0\n) \nnew_trail\n\n\n\n  \n\n\npredict(model_01_linear_lm_simple, new_data = new_trail)\n\n\n\n  \n\n\nmodels_tbl <- tibble(\n  model_id = str_c(\"Model 0\", 1:1),\n  model = list(\n    model_01_linear_lm_simple\n  )\n)\nmodels_tbl\n\n\n\n  \n\n\npredictions_new_trail <- models_tbl %>%\n  mutate(predictions = map(model, predict, new_data = new_trail)) %>%\n  unnest(predictions) %>%\n  mutate(category_2 = \"Trail\") %>%\n  left_join(new_trail, by = \"category_2\")\npredictions_new_trail\n\n\n\n  \n\n\ng2 <- g1 +\n  geom_point(aes(y = .pred), color = \"red\", alpha = 0.5,\n             data = predictions_new_trail) +\n  ggrepel::geom_text_repel(aes(label = model_id, y = .pred),\n                           size = 5,\n                           data = predictions_new_trail)\ng2\n\n#> Warning: Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped."
  },
  {
    "objectID": "content/01_journal/01 Machine Learning Fundamentals.html",
    "href": "content/01_journal/01 Machine Learning Fundamentals.html",
    "title": "01 Machine Learning Fundamentals",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "content/01_journal/01 Machine Learning Fundamentals.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/01 Machine Learning Fundamentals.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n5.1 Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\n#> Rows: 1,225,765\n#> Columns: 8\n#> $ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#> $ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#> $ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#> $ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#> $ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#> $ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#> $ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#> $ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n\n# Apply your data transformation skills!\nsp_500_daily_returns_tbl <- sp_500_prices_tbl %>% \n    select(symbol, date, adjusted) %>%          \n    filter(date >= \"2018-01-01\") %>%            \n    group_by(symbol) %>% \n    mutate(adj_lag = lag(adjusted)) %>% \n    filter(!is.na(adj_lag)) %>% \n    mutate(diff = adjusted - adj_lag,\n           pct_return = diff / adj_lag) %>% \n    select(symbol, date, pct_return)\n\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "content/01_journal/01 Machine Learning Fundamentals.html#step-2---convert-to-user-item-format",
    "href": "content/01_journal/01 Machine Learning Fundamentals.html#step-2---convert-to-user-item-format",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n5.2 Step 2 - Convert to User-Item Format",
    "text": "5.2 Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"../../sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n\n# Convert to User-Item Format\nstock_date_matrix_tbl <- sp_500_daily_returns_tbl %>% \n    pivot_wider(names_from = date,\n                values_from = pct_return,\n                values_fill = list(pct_return = 0))\nstock_date_matrix_tbl\n\n\n\n  \n\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "content/01_journal/01 Machine Learning Fundamentals.html#step-3---perform-k-means-clustering",
    "href": "content/01_journal/01 Machine Learning Fundamentals.html#step-3---perform-k-means-clustering",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n5.3 Step 3 - Perform K-Means Clustering",
    "text": "5.3 Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl <- read_rds(\"../../stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\n\nPerform kmeans() with centers = 4 and nstart = 20\n\nSave the result as kmeans_obj\n\n\n\n# Create kmeans_obj for 4 centers\nkmeans_obj <- stock_date_matrix_tbl %>% \n    select(-symbol) %>% \n    kmeans(centers = 4, nstart = 20)\nkmeans_obj %>% glance()\n\n\n\n  \n\n\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss"
  },
  {
    "objectID": "content/01_journal/01 Machine Learning Fundamentals.html#step-4---find-the-optimal-value-of-k",
    "href": "content/01_journal/01 Machine Learning Fundamentals.html#step-4---find-the-optimal-value-of-k",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n5.4 Step 4 - Find the optimal value of K",
    "text": "5.4 Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n\n# Use purrr to map\nk_means_mapped_tbl <- tibble(centers = 1:30) %>% \n    mutate(k_means = centers %>% map(kmeans_mapper),\n           glance = k_means %>% map(glance))\n\n\nk_means_mapped_tbl \n\n\n\n  \n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\n\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\n\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\nk_means_mapped_tbl %>% \n    unnest(glance) %>% \n    ggplot(aes(x = centers, y = tot.withinss)) +\n    geom_point() +\n    geom_line()\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "content/01_journal/01 Machine Learning Fundamentals.html#step-5---apply-umap",
    "href": "content/01_journal/01 Machine Learning Fundamentals.html#step-5---apply-umap",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n5.5 Step 5 - Apply UMAP",
    "text": "5.5 Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"../../k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\n\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n\n# Apply UMAP\n\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\n\nConvert from a matrix data type to a tibble with as_tibble()\n\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\n\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "content/01_journal/01 Machine Learning Fundamentals.html#step-6---combine-k-means-and-umap",
    "href": "content/01_journal/01 Machine Learning Fundamentals.html#step-6---combine-k-means-and-umap",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n5.6 Step 6 - Combine K-Means and UMAP",
    "text": "5.6 Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"../../k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"../../umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\n\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\n\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\n\nUse ggplot() mapping V1, V2 and color = .cluster\n\nAdd the geom_point() geometry with alpha = 0.5\n\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/"
  },
  {
    "objectID": "Chapter_1_Challenge.html",
    "href": "Chapter_1_Challenge.html",
    "title": "01 Machine Learning Fundamentals",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "01 Machine Learning Fundamentals",
    "section": "Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\nRows: 1,225,765\nColumns: 8\n$ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n$ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n$ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n$ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n$ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n$ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n$ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n$ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\nsp_500_daily_returns_tbl <- sp_500_prices_tbl %>% \n    select(symbol, date, adjusted) %>%          \n    filter(date >= \"2018-01-01\") %>%            \n    group_by(symbol) %>% \n    mutate(adj_lag = lag(adjusted)) %>% \n    filter(!is.na(adj_lag)) %>% \n    mutate(diff = adjusted - adj_lag,\n           pct_return = diff / adj_lag) %>% \n    select(symbol, date, pct_return)\n\nsp_500_daily_returns_tbl\n\n# A tibble: 141,340 × 3\n# Groups:   symbol [502]\n   symbol date       pct_return\n   <chr>  <date>          <dbl>\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n# ℹ 141,330 more rows\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "01 Machine Learning Fundamentals",
    "section": "Step 2 - Convert to User-Item Format",
    "text": "Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n# A tibble: 141,340 × 3\n   symbol date       pct_return\n   <chr>  <date>          <dbl>\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n# ℹ 141,330 more rows\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\nstock_date_matrix_tbl <- sp_500_daily_returns_tbl %>% \n    pivot_wider(names_from = date,\n                values_from = pct_return,\n                values_fill = list(pct_return = 0))\nstock_date_matrix_tbl\n\n# A tibble: 502 × 283\n   symbol `2018-01-03` `2018-01-04` `2018-01-05` `2018-01-08` `2018-01-09`\n   <chr>         <dbl>        <dbl>        <dbl>        <dbl>        <dbl>\n 1 MSFT       0.00465     0.00880       0.0124        0.00102    -0.000680\n 2 AAPL      -0.000174    0.00465       0.0114       -0.00371    -0.000115\n 3 AMZN       0.0128      0.00448       0.0162        0.0144      0.00468 \n 4 FB         0.0179     -0.00184       0.0137        0.00765    -0.00218 \n 5 JNJ        0.00955    -0.0000712     0.00825       0.00127     0.0159  \n 6 JPM        0.00102     0.0143       -0.00642       0.00148     0.00507 \n 7 GOOG       0.0164      0.00362       0.0146        0.00427    -0.000614\n 8 GOOGL      0.0171      0.00388       0.0133        0.00353    -0.00127 \n 9 XOM        0.0196      0.00138      -0.000806      0.00450    -0.00425 \n10 BAC       -0.00334     0.0131        0.00464      -0.00692     0.00498 \n# ℹ 492 more rows\n# ℹ 277 more variables: `2018-01-10` <dbl>, `2018-01-11` <dbl>,\n#   `2018-01-12` <dbl>, `2018-01-16` <dbl>, `2018-01-17` <dbl>,\n#   `2018-01-18` <dbl>, `2018-01-19` <dbl>, `2018-01-22` <dbl>,\n#   `2018-01-23` <dbl>, `2018-01-24` <dbl>, `2018-01-25` <dbl>,\n#   `2018-01-26` <dbl>, `2018-01-29` <dbl>, `2018-01-30` <dbl>,\n#   `2018-01-31` <dbl>, `2018-02-01` <dbl>, `2018-02-02` <dbl>, …\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "01 Machine Learning Fundamentals",
    "section": "Step 3 - Perform K-Means Clustering",
    "text": "Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl <- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\nkmeans_obj <- stock_date_matrix_tbl %>% \n    select(-symbol) %>% \n    kmeans(centers = 4, nstart = 20)\nkmeans_obj %>% glance()\n\n# A tibble: 1 × 4\n  totss tot.withinss betweenss  iter\n  <dbl>        <dbl>     <dbl> <int>\n1  33.6         29.2      4.40     5\n\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss"
  },
  {
    "objectID": "Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "01 Machine Learning Fundamentals",
    "section": "Step 4 - Find the optimal value of K",
    "text": "Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\nk_means_mapped_tbl <- tibble(centers = 1:30) %>% \n    mutate(k_means = centers %>% map(kmeans_mapper),\n           glance = k_means %>% map(glance))\n\n\nk_means_mapped_tbl \n\n# A tibble: 30 × 3\n   centers k_means  glance          \n     <int> <list>   <list>          \n 1       1 <kmeans> <tibble [1 × 4]>\n 2       2 <kmeans> <tibble [1 × 4]>\n 3       3 <kmeans> <tibble [1 × 4]>\n 4       4 <kmeans> <tibble [1 × 4]>\n 5       5 <kmeans> <tibble [1 × 4]>\n 6       6 <kmeans> <tibble [1 × 4]>\n 7       7 <kmeans> <tibble [1 × 4]>\n 8       8 <kmeans> <tibble [1 × 4]>\n 9       9 <kmeans> <tibble [1 × 4]>\n10      10 <kmeans> <tibble [1 × 4]>\n# ℹ 20 more rows\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\nk_means_mapped_tbl %>% \n    unnest(glance) %>% \n    ggplot(aes(x = centers, y = tot.withinss)) +\n    geom_point() +\n    geom_line()\n\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "01 Machine Learning Fundamentals",
    "section": "Step 5 - Apply UMAP",
    "text": "Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\n\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "01 Machine Learning Fundamentals",
    "section": "Step 6 - Combine K-Means and UMAP",
    "text": "Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\n\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n\nCongratulations! You are done with the 1st challenge!"
  }
]